#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tvtalk:server');
var http = require('http');
var firebase = require("firebase");
// var server = http.Server(app);


/**
 * Get port from environment and store in Express.
 */


 var config = {
     apiKey: "AIzaSyBJKZsuY9xVIcsN1glYF4BsrkkQsAOYXlg",
     authDomain: "tvtalk-c4d50.firebaseapp.com",
     databaseURL: "https://tvtalk-c4d50.firebaseio.com",
     storageBucket: "tvtalk-c4d50.appspot.com",
     messagingSenderId: "276781873007"
   };



var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

 io.sockets.on('connection', function (socket) {
   socket.on('check', function(msg) {
       if(msg == 'tvtalk'){
         io.emit('config', config);
       }else{
         io.emit('config', "fail");
       }
     });//socket.on

   socket.on('chat', function(msg) {
     if(msg != null){
       socket.room = msg;
       io.emit('config', config);
       var ref = firebase.database().ref("chatInfo/"+msg);
       ref.child("peopleCount").once("value", function(data){
         if(data.val()== null){
           var cnt = 1;
         }else{
           var cnt = parseInt(data.val())+1;
         }

         ref.child("peopleCount").set(cnt);
       });
     }else{
       io.emit('config', "fail");
     }
   });

   socket.on('disconnect', function(){
     if(socket.room != null){
       var ref = firebase.database().ref("chatInfo/"+socket.room);

       ref.child("peopleCount").once("value", function(data){
         var cnt = parseInt(data.val())-1;
         ref.child("peopleCount").set(cnt);
       });
     }
   });//disconnected

 });







server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
